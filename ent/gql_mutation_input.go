// Code generated by ent, DO NOT EDIT.

package ent

import (
	"shira-chan-dev/ent/order"
	"shira-chan-dev/ent/user"
	"time"
)

// CreateOrderInput represents a mutation input for creating orders.
type CreateOrderInput struct {
	Title       string
	Content     string
	Contact     string
	Type        *order.Type
	Status      *order.Status
	Evaluation  *float64
	HopeAt      *time.Time
	CreatedAt   *time.Time
	UpdatedAt   *time.Time
	RequesterID *int
	ReceifeIDs  []int
}

// Mutate applies the CreateOrderInput on the OrderMutation builder.
func (i *CreateOrderInput) Mutate(m *OrderMutation) {
	m.SetTitle(i.Title)
	m.SetContent(i.Content)
	m.SetContact(i.Contact)
	if v := i.Type; v != nil {
		m.SetType(*v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if v := i.Evaluation; v != nil {
		m.SetEvaluation(*v)
	}
	if v := i.HopeAt; v != nil {
		m.SetHopeAt(*v)
	}
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.RequesterID; v != nil {
		m.SetRequesterID(*v)
	}
	if v := i.ReceifeIDs; len(v) > 0 {
		m.AddReceifeIDs(v...)
	}
}

// SetInput applies the change-set in the CreateOrderInput on the OrderCreate builder.
func (c *OrderCreate) SetInput(i CreateOrderInput) *OrderCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateOrderInput represents a mutation input for updating orders.
type UpdateOrderInput struct {
	Title            *string
	Content          *string
	Contact          *string
	Type             *order.Type
	Status           *order.Status
	ClearEvaluation  bool
	Evaluation       *float64
	HopeAt           *time.Time
	UpdatedAt        *time.Time
	ClearRequester   bool
	RequesterID      *int
	ClearReceives    bool
	AddReceifeIDs    []int
	RemoveReceifeIDs []int
}

// Mutate applies the UpdateOrderInput on the OrderMutation builder.
func (i *UpdateOrderInput) Mutate(m *OrderMutation) {
	if v := i.Title; v != nil {
		m.SetTitle(*v)
	}
	if v := i.Content; v != nil {
		m.SetContent(*v)
	}
	if v := i.Contact; v != nil {
		m.SetContact(*v)
	}
	if v := i.Type; v != nil {
		m.SetType(*v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if i.ClearEvaluation {
		m.ClearEvaluation()
	}
	if v := i.Evaluation; v != nil {
		m.SetEvaluation(*v)
	}
	if v := i.HopeAt; v != nil {
		m.SetHopeAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearRequester {
		m.ClearRequester()
	}
	if v := i.RequesterID; v != nil {
		m.SetRequesterID(*v)
	}
	if i.ClearReceives {
		m.ClearReceives()
	}
	if v := i.AddReceifeIDs; len(v) > 0 {
		m.AddReceifeIDs(v...)
	}
	if v := i.RemoveReceifeIDs; len(v) > 0 {
		m.RemoveReceifeIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateOrderInput on the OrderUpdate builder.
func (c *OrderUpdate) SetInput(i UpdateOrderInput) *OrderUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateOrderInput on the OrderUpdateOne builder.
func (c *OrderUpdateOne) SetInput(i UpdateOrderInput) *OrderUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateUserInput represents a mutation input for creating users.
type CreateUserInput struct {
	Uname       string
	Passwd      string
	Phone       string
	Wechat      *string
	Level       *user.Level
	Dept        *user.Dept
	State       *user.State
	CreatedAt   *time.Time
	UpdatedAt   *time.Time
	RequestIDs  []int
	ReceiverIDs []int
}

// Mutate applies the CreateUserInput on the UserMutation builder.
func (i *CreateUserInput) Mutate(m *UserMutation) {
	m.SetUname(i.Uname)
	m.SetPasswd(i.Passwd)
	m.SetPhone(i.Phone)
	if v := i.Wechat; v != nil {
		m.SetWechat(*v)
	}
	if v := i.Level; v != nil {
		m.SetLevel(*v)
	}
	if v := i.Dept; v != nil {
		m.SetDept(*v)
	}
	if v := i.State; v != nil {
		m.SetState(*v)
	}
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.RequestIDs; len(v) > 0 {
		m.AddRequestIDs(v...)
	}
	if v := i.ReceiverIDs; len(v) > 0 {
		m.AddReceiverIDs(v...)
	}
}

// SetInput applies the change-set in the CreateUserInput on the UserCreate builder.
func (c *UserCreate) SetInput(i CreateUserInput) *UserCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateUserInput represents a mutation input for updating users.
type UpdateUserInput struct {
	Uname             *string
	Passwd            *string
	Phone             *string
	Wechat            *string
	Level             *user.Level
	Dept              *user.Dept
	State             *user.State
	UpdatedAt         *time.Time
	ClearRequests     bool
	AddRequestIDs     []int
	RemoveRequestIDs  []int
	ClearReceiver     bool
	AddReceiverIDs    []int
	RemoveReceiverIDs []int
}

// Mutate applies the UpdateUserInput on the UserMutation builder.
func (i *UpdateUserInput) Mutate(m *UserMutation) {
	if v := i.Uname; v != nil {
		m.SetUname(*v)
	}
	if v := i.Passwd; v != nil {
		m.SetPasswd(*v)
	}
	if v := i.Phone; v != nil {
		m.SetPhone(*v)
	}
	if v := i.Wechat; v != nil {
		m.SetWechat(*v)
	}
	if v := i.Level; v != nil {
		m.SetLevel(*v)
	}
	if v := i.Dept; v != nil {
		m.SetDept(*v)
	}
	if v := i.State; v != nil {
		m.SetState(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearRequests {
		m.ClearRequests()
	}
	if v := i.AddRequestIDs; len(v) > 0 {
		m.AddRequestIDs(v...)
	}
	if v := i.RemoveRequestIDs; len(v) > 0 {
		m.RemoveRequestIDs(v...)
	}
	if i.ClearReceiver {
		m.ClearReceiver()
	}
	if v := i.AddReceiverIDs; len(v) > 0 {
		m.AddReceiverIDs(v...)
	}
	if v := i.RemoveReceiverIDs; len(v) > 0 {
		m.RemoveReceiverIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdate builder.
func (c *UserUpdate) SetInput(i UpdateUserInput) *UserUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdateOne builder.
func (c *UserUpdateOne) SetInput(i UpdateUserInput) *UserUpdateOne {
	i.Mutate(c.Mutation())
	return c
}
