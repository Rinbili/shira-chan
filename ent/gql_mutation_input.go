// Code generated by ent, DO NOT EDIT.

package ent

// CreateOrderInput represents a mutation input for creating orders.
type CreateOrderInput struct {
	CreatedAt   *int64
	UpdatedAt   *int64
	Title       string
	Content     string
	Contact     string
	Type        *string
	IsClosed    *bool
	IsFinished  *bool
	Evaluation  *float64
	HopeAt      *int64
	RequesterID *int
	ReceiverIDs []int
}

// Mutate applies the CreateOrderInput on the OrderMutation builder.
func (i *CreateOrderInput) Mutate(m *OrderMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetTitle(i.Title)
	m.SetContent(i.Content)
	m.SetContact(i.Contact)
	if v := i.Type; v != nil {
		m.SetType(*v)
	}
	if v := i.IsClosed; v != nil {
		m.SetIsClosed(*v)
	}
	if v := i.IsFinished; v != nil {
		m.SetIsFinished(*v)
	}
	if v := i.Evaluation; v != nil {
		m.SetEvaluation(*v)
	}
	if v := i.HopeAt; v != nil {
		m.SetHopeAt(*v)
	}
	if v := i.RequesterID; v != nil {
		m.SetRequesterID(*v)
	}
	if v := i.ReceiverIDs; len(v) > 0 {
		m.AddReceiverIDs(v...)
	}
}

// SetInput applies the change-set in the CreateOrderInput on the OrderCreate builder.
func (c *OrderCreate) SetInput(i CreateOrderInput) *OrderCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateOrderInput represents a mutation input for updating orders.
type UpdateOrderInput struct {
	UpdatedAt         *int64
	Title             *string
	Content           *string
	Contact           *string
	Type              *string
	IsClosed          *bool
	IsFinished        *bool
	ClearEvaluation   bool
	Evaluation        *float64
	HopeAt            *int64
	ClearRequester    bool
	RequesterID       *int
	ClearReceiver     bool
	AddReceiverIDs    []int
	RemoveReceiverIDs []int
}

// Mutate applies the UpdateOrderInput on the OrderMutation builder.
func (i *UpdateOrderInput) Mutate(m *OrderMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.Title; v != nil {
		m.SetTitle(*v)
	}
	if v := i.Content; v != nil {
		m.SetContent(*v)
	}
	if v := i.Contact; v != nil {
		m.SetContact(*v)
	}
	if v := i.Type; v != nil {
		m.SetType(*v)
	}
	if v := i.IsClosed; v != nil {
		m.SetIsClosed(*v)
	}
	if v := i.IsFinished; v != nil {
		m.SetIsFinished(*v)
	}
	if i.ClearEvaluation {
		m.ClearEvaluation()
	}
	if v := i.Evaluation; v != nil {
		m.SetEvaluation(*v)
	}
	if v := i.HopeAt; v != nil {
		m.SetHopeAt(*v)
	}
	if i.ClearRequester {
		m.ClearRequester()
	}
	if v := i.RequesterID; v != nil {
		m.SetRequesterID(*v)
	}
	if i.ClearReceiver {
		m.ClearReceiver()
	}
	if v := i.AddReceiverIDs; len(v) > 0 {
		m.AddReceiverIDs(v...)
	}
	if v := i.RemoveReceiverIDs; len(v) > 0 {
		m.RemoveReceiverIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateOrderInput on the OrderUpdate builder.
func (c *OrderUpdate) SetInput(i UpdateOrderInput) *OrderUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateOrderInput on the OrderUpdateOne builder.
func (c *OrderUpdateOne) SetInput(i UpdateOrderInput) *OrderUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateUserInput represents a mutation input for creating users.
type CreateUserInput struct {
	CreatedAt    *int64
	UpdatedAt    *int64
	Uname        string
	Passwd       string
	Phone        string
	IsAdmin      *bool
	IsSecretary  *bool
	IsActive     *bool
	RequestedIDs []int
	ReceivedIDs  []int
}

// Mutate applies the CreateUserInput on the UserMutation builder.
func (i *CreateUserInput) Mutate(m *UserMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetUname(i.Uname)
	m.SetPasswd(i.Passwd)
	m.SetPhone(i.Phone)
	if v := i.IsAdmin; v != nil {
		m.SetIsAdmin(*v)
	}
	if v := i.IsSecretary; v != nil {
		m.SetIsSecretary(*v)
	}
	if v := i.IsActive; v != nil {
		m.SetIsActive(*v)
	}
	if v := i.RequestedIDs; len(v) > 0 {
		m.AddRequestedIDs(v...)
	}
	if v := i.ReceivedIDs; len(v) > 0 {
		m.AddReceivedIDs(v...)
	}
}

// SetInput applies the change-set in the CreateUserInput on the UserCreate builder.
func (c *UserCreate) SetInput(i CreateUserInput) *UserCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateUserInput represents a mutation input for updating users.
type UpdateUserInput struct {
	UpdatedAt          *int64
	Uname              *string
	Passwd             *string
	Phone              *string
	IsAdmin            *bool
	IsSecretary        *bool
	IsActive           *bool
	ClearRequested     bool
	AddRequestedIDs    []int
	RemoveRequestedIDs []int
	ClearReceived      bool
	AddReceivedIDs     []int
	RemoveReceivedIDs  []int
}

// Mutate applies the UpdateUserInput on the UserMutation builder.
func (i *UpdateUserInput) Mutate(m *UserMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.Uname; v != nil {
		m.SetUname(*v)
	}
	if v := i.Passwd; v != nil {
		m.SetPasswd(*v)
	}
	if v := i.Phone; v != nil {
		m.SetPhone(*v)
	}
	if v := i.IsAdmin; v != nil {
		m.SetIsAdmin(*v)
	}
	if v := i.IsSecretary; v != nil {
		m.SetIsSecretary(*v)
	}
	if v := i.IsActive; v != nil {
		m.SetIsActive(*v)
	}
	if i.ClearRequested {
		m.ClearRequested()
	}
	if v := i.AddRequestedIDs; len(v) > 0 {
		m.AddRequestedIDs(v...)
	}
	if v := i.RemoveRequestedIDs; len(v) > 0 {
		m.RemoveRequestedIDs(v...)
	}
	if i.ClearReceived {
		m.ClearReceived()
	}
	if v := i.AddReceivedIDs; len(v) > 0 {
		m.AddReceivedIDs(v...)
	}
	if v := i.RemoveReceivedIDs; len(v) > 0 {
		m.RemoveReceivedIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdate builder.
func (c *UserUpdate) SetInput(i UpdateUserInput) *UserUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdateOne builder.
func (c *UserUpdateOne) SetInput(i UpdateUserInput) *UserUpdateOne {
	i.Mutate(c.Mutation())
	return c
}
