// Code generated by ent, DO NOT EDIT.

package ent

import (
	"shira-chan-dev/ent/order"
	"shira-chan-dev/ent/schema"
	"shira-chan-dev/ent/user"
	"time"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	orderFields := schema.Order{}.Fields()
	_ = orderFields
	// orderDescTitle is the schema descriptor for title field.
	orderDescTitle := orderFields[0].Descriptor()
	// order.TitleValidator is a validator for the "title" field. It is called by the builders before save.
	order.TitleValidator = func() func(string) error {
		validators := orderDescTitle.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(title string) error {
			for _, fn := range fns {
				if err := fn(title); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// orderDescContent is the schema descriptor for content field.
	orderDescContent := orderFields[1].Descriptor()
	// order.ContentValidator is a validator for the "content" field. It is called by the builders before save.
	order.ContentValidator = func() func(string) error {
		validators := orderDescContent.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(content string) error {
			for _, fn := range fns {
				if err := fn(content); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// orderDescContact is the schema descriptor for contact field.
	orderDescContact := orderFields[2].Descriptor()
	// order.ContactValidator is a validator for the "contact" field. It is called by the builders before save.
	order.ContactValidator = orderDescContact.Validators[0].(func(string) error)
	// orderDescHopeAt is the schema descriptor for hope_at field.
	orderDescHopeAt := orderFields[6].Descriptor()
	// order.DefaultHopeAt holds the default value on creation for the hope_at field.
	order.DefaultHopeAt = orderDescHopeAt.Default.(time.Time)
	// orderDescCreatedAt is the schema descriptor for created_at field.
	orderDescCreatedAt := orderFields[7].Descriptor()
	// order.DefaultCreatedAt holds the default value on creation for the created_at field.
	order.DefaultCreatedAt = orderDescCreatedAt.Default.(func() time.Time)
	// orderDescUpdatedAt is the schema descriptor for updated_at field.
	orderDescUpdatedAt := orderFields[8].Descriptor()
	// order.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	order.DefaultUpdatedAt = orderDescUpdatedAt.Default.(func() time.Time)
	// order.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	order.UpdateDefaultUpdatedAt = orderDescUpdatedAt.UpdateDefault.(func() time.Time)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescUname is the schema descriptor for uname field.
	userDescUname := userFields[0].Descriptor()
	// user.UnameValidator is a validator for the "uname" field. It is called by the builders before save.
	user.UnameValidator = func() func(string) error {
		validators := userDescUname.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(uname string) error {
			for _, fn := range fns {
				if err := fn(uname); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescPasswd is the schema descriptor for passwd field.
	userDescPasswd := userFields[1].Descriptor()
	// user.PasswdValidator is a validator for the "passwd" field. It is called by the builders before save.
	user.PasswdValidator = userDescPasswd.Validators[0].(func(string) error)
	// userDescPhone is the schema descriptor for phone field.
	userDescPhone := userFields[2].Descriptor()
	// user.PhoneValidator is a validator for the "phone" field. It is called by the builders before save.
	user.PhoneValidator = func() func(string) error {
		validators := userDescPhone.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(phone string) error {
			for _, fn := range fns {
				if err := fn(phone); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescWechat is the schema descriptor for wechat field.
	userDescWechat := userFields[3].Descriptor()
	// user.DefaultWechat holds the default value on creation for the wechat field.
	user.DefaultWechat = userDescWechat.Default.(string)
	// user.WechatValidator is a validator for the "wechat" field. It is called by the builders before save.
	user.WechatValidator = userDescWechat.Validators[0].(func(string) error)
	// userDescCreatedAt is the schema descriptor for created_at field.
	userDescCreatedAt := userFields[7].Descriptor()
	// user.DefaultCreatedAt holds the default value on creation for the created_at field.
	user.DefaultCreatedAt = userDescCreatedAt.Default.(func() time.Time)
	// userDescUpdatedAt is the schema descriptor for updated_at field.
	userDescUpdatedAt := userFields[8].Descriptor()
	// user.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	user.DefaultUpdatedAt = userDescUpdatedAt.Default.(func() time.Time)
	// user.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	user.UpdateDefaultUpdatedAt = userDescUpdatedAt.UpdateDefault.(func() time.Time)
}
