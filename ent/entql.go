// Code generated by ent, DO NOT EDIT.

package ent

import (
	"shira-chan-dev/ent/order"
	"shira-chan-dev/ent/predicate"
	"shira-chan-dev/ent/receive"
	"shira-chan-dev/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 3)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   order.Table,
			Columns: order.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: order.FieldID,
			},
		},
		Type: "Order",
		Fields: map[string]*sqlgraph.FieldSpec{
			order.FieldCreatedAt:  {Type: field.TypeInt64, Column: order.FieldCreatedAt},
			order.FieldUpdatedAt:  {Type: field.TypeInt64, Column: order.FieldUpdatedAt},
			order.FieldTitle:      {Type: field.TypeString, Column: order.FieldTitle},
			order.FieldContent:    {Type: field.TypeString, Column: order.FieldContent},
			order.FieldContact:    {Type: field.TypeString, Column: order.FieldContact},
			order.FieldType:       {Type: field.TypeString, Column: order.FieldType},
			order.FieldIsClosed:   {Type: field.TypeBool, Column: order.FieldIsClosed},
			order.FieldIsFinished: {Type: field.TypeBool, Column: order.FieldIsFinished},
			order.FieldEvaluation: {Type: field.TypeFloat64, Column: order.FieldEvaluation},
			order.FieldHopeAt:     {Type: field.TypeInt64, Column: order.FieldHopeAt},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   receive.Table,
			Columns: receive.Columns,
			CompositeID: []*sqlgraph.FieldSpec{
				{
					Type:   field.TypeInt,
					Column: receive.FieldOrderID,
				},
				{
					Type:   field.TypeInt,
					Column: receive.FieldUserID,
				},
			},
		},
		Type: "Receive",
		Fields: map[string]*sqlgraph.FieldSpec{
			receive.FieldCreatedAt: {Type: field.TypeInt64, Column: receive.FieldCreatedAt},
			receive.FieldUpdatedAt: {Type: field.TypeInt64, Column: receive.FieldUpdatedAt},
			receive.FieldUserID:    {Type: field.TypeInt, Column: receive.FieldUserID},
			receive.FieldOrderID:   {Type: field.TypeInt, Column: receive.FieldOrderID},
		},
	}
	graph.Nodes[2] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: user.FieldID,
			},
		},
		Type: "User",
		Fields: map[string]*sqlgraph.FieldSpec{
			user.FieldCreatedAt:   {Type: field.TypeInt64, Column: user.FieldCreatedAt},
			user.FieldUpdatedAt:   {Type: field.TypeInt64, Column: user.FieldUpdatedAt},
			user.FieldUname:       {Type: field.TypeString, Column: user.FieldUname},
			user.FieldPasswd:      {Type: field.TypeString, Column: user.FieldPasswd},
			user.FieldPhone:       {Type: field.TypeString, Column: user.FieldPhone},
			user.FieldIsAdmin:     {Type: field.TypeBool, Column: user.FieldIsAdmin},
			user.FieldIsSecretary: {Type: field.TypeBool, Column: user.FieldIsSecretary},
			user.FieldIsActive:    {Type: field.TypeBool, Column: user.FieldIsActive},
		},
	}
	graph.MustAddE(
		"requester",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.RequesterTable,
			Columns: []string{order.RequesterColumn},
			Bidi:    false,
		},
		"Order",
		"User",
	)
	graph.MustAddE(
		"receiver",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   order.ReceiverTable,
			Columns: order.ReceiverPrimaryKey,
			Bidi:    false,
		},
		"Order",
		"User",
	)
	graph.MustAddE(
		"receives",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   order.ReceivesTable,
			Columns: []string{order.ReceivesColumn},
			Bidi:    false,
		},
		"Order",
		"Receive",
	)
	graph.MustAddE(
		"user",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   receive.UserTable,
			Columns: []string{receive.UserColumn},
			Bidi:    false,
		},
		"Receive",
		"User",
	)
	graph.MustAddE(
		"order",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   receive.OrderTable,
			Columns: []string{receive.OrderColumn},
			Bidi:    false,
		},
		"Receive",
		"Order",
	)
	graph.MustAddE(
		"requested",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.RequestedTable,
			Columns: []string{user.RequestedColumn},
			Bidi:    false,
		},
		"User",
		"Order",
	)
	graph.MustAddE(
		"received",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.ReceivedTable,
			Columns: user.ReceivedPrimaryKey,
			Bidi:    false,
		},
		"User",
		"Order",
	)
	graph.MustAddE(
		"receives",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.ReceivesTable,
			Columns: []string{user.ReceivesColumn},
			Bidi:    false,
		},
		"User",
		"Receive",
	)
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (oq *OrderQuery) addPredicate(pred func(s *sql.Selector)) {
	oq.predicates = append(oq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OrderQuery builder.
func (oq *OrderQuery) Filter() *OrderFilter {
	return &OrderFilter{config: oq.config, predicateAdder: oq}
}

// addPredicate implements the predicateAdder interface.
func (m *OrderMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OrderMutation builder.
func (m *OrderMutation) Filter() *OrderFilter {
	return &OrderFilter{config: m.config, predicateAdder: m}
}

// OrderFilter provides a generic filtering capability at runtime for OrderQuery.
type OrderFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *OrderFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *OrderFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(order.FieldID))
}

// WhereCreatedAt applies the entql int64 predicate on the created_at field.
func (f *OrderFilter) WhereCreatedAt(p entql.Int64P) {
	f.Where(p.Field(order.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql int64 predicate on the updated_at field.
func (f *OrderFilter) WhereUpdatedAt(p entql.Int64P) {
	f.Where(p.Field(order.FieldUpdatedAt))
}

// WhereTitle applies the entql string predicate on the title field.
func (f *OrderFilter) WhereTitle(p entql.StringP) {
	f.Where(p.Field(order.FieldTitle))
}

// WhereContent applies the entql string predicate on the content field.
func (f *OrderFilter) WhereContent(p entql.StringP) {
	f.Where(p.Field(order.FieldContent))
}

// WhereContact applies the entql string predicate on the contact field.
func (f *OrderFilter) WhereContact(p entql.StringP) {
	f.Where(p.Field(order.FieldContact))
}

// WhereType applies the entql string predicate on the type field.
func (f *OrderFilter) WhereType(p entql.StringP) {
	f.Where(p.Field(order.FieldType))
}

// WhereIsClosed applies the entql bool predicate on the is_closed field.
func (f *OrderFilter) WhereIsClosed(p entql.BoolP) {
	f.Where(p.Field(order.FieldIsClosed))
}

// WhereIsFinished applies the entql bool predicate on the is_finished field.
func (f *OrderFilter) WhereIsFinished(p entql.BoolP) {
	f.Where(p.Field(order.FieldIsFinished))
}

// WhereEvaluation applies the entql float64 predicate on the evaluation field.
func (f *OrderFilter) WhereEvaluation(p entql.Float64P) {
	f.Where(p.Field(order.FieldEvaluation))
}

// WhereHopeAt applies the entql int64 predicate on the hope_at field.
func (f *OrderFilter) WhereHopeAt(p entql.Int64P) {
	f.Where(p.Field(order.FieldHopeAt))
}

// WhereHasRequester applies a predicate to check if query has an edge requester.
func (f *OrderFilter) WhereHasRequester() {
	f.Where(entql.HasEdge("requester"))
}

// WhereHasRequesterWith applies a predicate to check if query has an edge requester with a given conditions (other predicates).
func (f *OrderFilter) WhereHasRequesterWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("requester", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasReceiver applies a predicate to check if query has an edge receiver.
func (f *OrderFilter) WhereHasReceiver() {
	f.Where(entql.HasEdge("receiver"))
}

// WhereHasReceiverWith applies a predicate to check if query has an edge receiver with a given conditions (other predicates).
func (f *OrderFilter) WhereHasReceiverWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("receiver", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasReceives applies a predicate to check if query has an edge receives.
func (f *OrderFilter) WhereHasReceives() {
	f.Where(entql.HasEdge("receives"))
}

// WhereHasReceivesWith applies a predicate to check if query has an edge receives with a given conditions (other predicates).
func (f *OrderFilter) WhereHasReceivesWith(preds ...predicate.Receive) {
	f.Where(entql.HasEdgeWith("receives", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (rq *ReceiveQuery) addPredicate(pred func(s *sql.Selector)) {
	rq.predicates = append(rq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ReceiveQuery builder.
func (rq *ReceiveQuery) Filter() *ReceiveFilter {
	return &ReceiveFilter{config: rq.config, predicateAdder: rq}
}

// addPredicate implements the predicateAdder interface.
func (m *ReceiveMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ReceiveMutation builder.
func (m *ReceiveMutation) Filter() *ReceiveFilter {
	return &ReceiveFilter{config: m.config, predicateAdder: m}
}

// ReceiveFilter provides a generic filtering capability at runtime for ReceiveQuery.
type ReceiveFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ReceiveFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereCreatedAt applies the entql int64 predicate on the created_at field.
func (f *ReceiveFilter) WhereCreatedAt(p entql.Int64P) {
	f.Where(p.Field(receive.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql int64 predicate on the updated_at field.
func (f *ReceiveFilter) WhereUpdatedAt(p entql.Int64P) {
	f.Where(p.Field(receive.FieldUpdatedAt))
}

// WhereUserID applies the entql int predicate on the user_id field.
func (f *ReceiveFilter) WhereUserID(p entql.IntP) {
	f.Where(p.Field(receive.FieldUserID))
}

// WhereOrderID applies the entql int predicate on the order_id field.
func (f *ReceiveFilter) WhereOrderID(p entql.IntP) {
	f.Where(p.Field(receive.FieldOrderID))
}

// WhereHasUser applies a predicate to check if query has an edge user.
func (f *ReceiveFilter) WhereHasUser() {
	f.Where(entql.HasEdge("user"))
}

// WhereHasUserWith applies a predicate to check if query has an edge user with a given conditions (other predicates).
func (f *ReceiveFilter) WhereHasUserWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("user", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrder applies a predicate to check if query has an edge order.
func (f *ReceiveFilter) WhereHasOrder() {
	f.Where(entql.HasEdge("order"))
}

// WhereHasOrderWith applies a predicate to check if query has an edge order with a given conditions (other predicates).
func (f *ReceiveFilter) WhereHasOrderWith(preds ...predicate.Order) {
	f.Where(entql.HasEdgeWith("order", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (uq *UserQuery) addPredicate(pred func(s *sql.Selector)) {
	uq.predicates = append(uq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the UserQuery builder.
func (uq *UserQuery) Filter() *UserFilter {
	return &UserFilter{config: uq.config, predicateAdder: uq}
}

// addPredicate implements the predicateAdder interface.
func (m *UserMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the UserMutation builder.
func (m *UserMutation) Filter() *UserFilter {
	return &UserFilter{config: m.config, predicateAdder: m}
}

// UserFilter provides a generic filtering capability at runtime for UserQuery.
type UserFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *UserFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[2].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *UserFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(user.FieldID))
}

// WhereCreatedAt applies the entql int64 predicate on the created_at field.
func (f *UserFilter) WhereCreatedAt(p entql.Int64P) {
	f.Where(p.Field(user.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql int64 predicate on the updated_at field.
func (f *UserFilter) WhereUpdatedAt(p entql.Int64P) {
	f.Where(p.Field(user.FieldUpdatedAt))
}

// WhereUname applies the entql string predicate on the uname field.
func (f *UserFilter) WhereUname(p entql.StringP) {
	f.Where(p.Field(user.FieldUname))
}

// WherePasswd applies the entql string predicate on the passwd field.
func (f *UserFilter) WherePasswd(p entql.StringP) {
	f.Where(p.Field(user.FieldPasswd))
}

// WherePhone applies the entql string predicate on the phone field.
func (f *UserFilter) WherePhone(p entql.StringP) {
	f.Where(p.Field(user.FieldPhone))
}

// WhereIsAdmin applies the entql bool predicate on the is_admin field.
func (f *UserFilter) WhereIsAdmin(p entql.BoolP) {
	f.Where(p.Field(user.FieldIsAdmin))
}

// WhereIsSecretary applies the entql bool predicate on the is_secretary field.
func (f *UserFilter) WhereIsSecretary(p entql.BoolP) {
	f.Where(p.Field(user.FieldIsSecretary))
}

// WhereIsActive applies the entql bool predicate on the is_active field.
func (f *UserFilter) WhereIsActive(p entql.BoolP) {
	f.Where(p.Field(user.FieldIsActive))
}

// WhereHasRequested applies a predicate to check if query has an edge requested.
func (f *UserFilter) WhereHasRequested() {
	f.Where(entql.HasEdge("requested"))
}

// WhereHasRequestedWith applies a predicate to check if query has an edge requested with a given conditions (other predicates).
func (f *UserFilter) WhereHasRequestedWith(preds ...predicate.Order) {
	f.Where(entql.HasEdgeWith("requested", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasReceived applies a predicate to check if query has an edge received.
func (f *UserFilter) WhereHasReceived() {
	f.Where(entql.HasEdge("received"))
}

// WhereHasReceivedWith applies a predicate to check if query has an edge received with a given conditions (other predicates).
func (f *UserFilter) WhereHasReceivedWith(preds ...predicate.Order) {
	f.Where(entql.HasEdgeWith("received", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasReceives applies a predicate to check if query has an edge receives.
func (f *UserFilter) WhereHasReceives() {
	f.Where(entql.HasEdge("receives"))
}

// WhereHasReceivesWith applies a predicate to check if query has an edge receives with a given conditions (other predicates).
func (f *UserFilter) WhereHasReceivesWith(preds ...predicate.Receive) {
	f.Where(entql.HasEdgeWith("receives", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}
