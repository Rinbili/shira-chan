// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

func (o *Order) Requester(ctx context.Context) (*User, error) {
	result, err := o.Edges.RequesterOrErr()
	if IsNotLoaded(err) {
		result, err = o.QueryRequester().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (o *Order) Receives(ctx context.Context) (result []*User, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = o.NamedReceives(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = o.Edges.ReceivesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = o.QueryReceives().All(ctx)
	}
	return result, err
}

func (u *User) Requests(ctx context.Context) (result []*Order, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedRequests(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.RequestsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryRequests().All(ctx)
	}
	return result, err
}

func (u *User) Receiver(ctx context.Context) (result []*Order, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedReceiver(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.ReceiverOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryReceiver().All(ctx)
	}
	return result, err
}
