// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"shira-chan-dev/ent/order"
	"shira-chan-dev/ent/receive"
	"shira-chan-dev/ent/user"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Receive is the model entity for the Receive schema.
type Receive struct {
	config `json:"-"`
	// 创建时间
	CreatedAt int64 `json:"created_at,omitempty"`
	// 更新时间
	UpdatedAt int64 `json:"updated_at,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int `json:"user_id,omitempty"`
	// OrderID holds the value of the "order_id" field.
	OrderID int `json:"order_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ReceiveQuery when eager-loading is set.
	Edges        ReceiveEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ReceiveEdges holds the relations/edges for other nodes in the graph.
type ReceiveEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Order holds the value of the order edge.
	Order *Order `json:"order,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReceiveEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// OrderOrErr returns the Order value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReceiveEdges) OrderOrErr() (*Order, error) {
	if e.loadedTypes[1] {
		if e.Order == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: order.Label}
		}
		return e.Order, nil
	}
	return nil, &NotLoadedError{edge: "order"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Receive) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case receive.FieldCreatedAt, receive.FieldUpdatedAt, receive.FieldUserID, receive.FieldOrderID:
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Receive fields.
func (r *Receive) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case receive.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				r.CreatedAt = value.Int64
			}
		case receive.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				r.UpdatedAt = value.Int64
			}
		case receive.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				r.UserID = int(value.Int64)
			}
		case receive.FieldOrderID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order_id", values[i])
			} else if value.Valid {
				r.OrderID = int(value.Int64)
			}
		default:
			r.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Receive.
// This includes values selected through modifiers, order, etc.
func (r *Receive) Value(name string) (ent.Value, error) {
	return r.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the Receive entity.
func (r *Receive) QueryUser() *UserQuery {
	return NewReceiveClient(r.config).QueryUser(r)
}

// QueryOrder queries the "order" edge of the Receive entity.
func (r *Receive) QueryOrder() *OrderQuery {
	return NewReceiveClient(r.config).QueryOrder(r)
}

// Update returns a builder for updating this Receive.
// Note that you need to call Receive.Unwrap() before calling this method if this Receive
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Receive) Update() *ReceiveUpdateOne {
	return NewReceiveClient(r.config).UpdateOne(r)
}

// Unwrap unwraps the Receive entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Receive) Unwrap() *Receive {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Receive is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Receive) String() string {
	var builder strings.Builder
	builder.WriteString("Receive(")
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", r.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", r.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", r.UserID))
	builder.WriteString(", ")
	builder.WriteString("order_id=")
	builder.WriteString(fmt.Sprintf("%v", r.OrderID))
	builder.WriteByte(')')
	return builder.String()
}

// Receives is a parsable slice of Receive.
type Receives []*Receive
