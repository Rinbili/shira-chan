// Code generated by ent, DO NOT EDIT.

package order

import (
	"shira-chan-dev/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldID, id))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldTitle, v))
}

// Content applies equality check predicate on the "content" field. It's identical to ContentEQ.
func Content(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldContent, v))
}

// Contact applies equality check predicate on the "contact" field. It's identical to ContactEQ.
func Contact(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldContact, v))
}

// Evaluation applies equality check predicate on the "evaluation" field. It's identical to EvaluationEQ.
func Evaluation(v float64) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldEvaluation, v))
}

// HopeAt applies equality check predicate on the "hope_at" field. It's identical to HopeAtEQ.
func HopeAt(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldHopeAt, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldUpdatedAt, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Order {
	return predicate.Order(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Order {
	return predicate.Order(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Order {
	return predicate.Order(sql.FieldContainsFold(FieldTitle, v))
}

// ContentEQ applies the EQ predicate on the "content" field.
func ContentEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldContent, v))
}

// ContentNEQ applies the NEQ predicate on the "content" field.
func ContentNEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldContent, v))
}

// ContentIn applies the In predicate on the "content" field.
func ContentIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldContent, vs...))
}

// ContentNotIn applies the NotIn predicate on the "content" field.
func ContentNotIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldContent, vs...))
}

// ContentGT applies the GT predicate on the "content" field.
func ContentGT(v string) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldContent, v))
}

// ContentGTE applies the GTE predicate on the "content" field.
func ContentGTE(v string) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldContent, v))
}

// ContentLT applies the LT predicate on the "content" field.
func ContentLT(v string) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldContent, v))
}

// ContentLTE applies the LTE predicate on the "content" field.
func ContentLTE(v string) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldContent, v))
}

// ContentContains applies the Contains predicate on the "content" field.
func ContentContains(v string) predicate.Order {
	return predicate.Order(sql.FieldContains(FieldContent, v))
}

// ContentHasPrefix applies the HasPrefix predicate on the "content" field.
func ContentHasPrefix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasPrefix(FieldContent, v))
}

// ContentHasSuffix applies the HasSuffix predicate on the "content" field.
func ContentHasSuffix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasSuffix(FieldContent, v))
}

// ContentEqualFold applies the EqualFold predicate on the "content" field.
func ContentEqualFold(v string) predicate.Order {
	return predicate.Order(sql.FieldEqualFold(FieldContent, v))
}

// ContentContainsFold applies the ContainsFold predicate on the "content" field.
func ContentContainsFold(v string) predicate.Order {
	return predicate.Order(sql.FieldContainsFold(FieldContent, v))
}

// ContactEQ applies the EQ predicate on the "contact" field.
func ContactEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldContact, v))
}

// ContactNEQ applies the NEQ predicate on the "contact" field.
func ContactNEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldContact, v))
}

// ContactIn applies the In predicate on the "contact" field.
func ContactIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldContact, vs...))
}

// ContactNotIn applies the NotIn predicate on the "contact" field.
func ContactNotIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldContact, vs...))
}

// ContactGT applies the GT predicate on the "contact" field.
func ContactGT(v string) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldContact, v))
}

// ContactGTE applies the GTE predicate on the "contact" field.
func ContactGTE(v string) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldContact, v))
}

// ContactLT applies the LT predicate on the "contact" field.
func ContactLT(v string) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldContact, v))
}

// ContactLTE applies the LTE predicate on the "contact" field.
func ContactLTE(v string) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldContact, v))
}

// ContactContains applies the Contains predicate on the "contact" field.
func ContactContains(v string) predicate.Order {
	return predicate.Order(sql.FieldContains(FieldContact, v))
}

// ContactHasPrefix applies the HasPrefix predicate on the "contact" field.
func ContactHasPrefix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasPrefix(FieldContact, v))
}

// ContactHasSuffix applies the HasSuffix predicate on the "contact" field.
func ContactHasSuffix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasSuffix(FieldContact, v))
}

// ContactEqualFold applies the EqualFold predicate on the "contact" field.
func ContactEqualFold(v string) predicate.Order {
	return predicate.Order(sql.FieldEqualFold(FieldContact, v))
}

// ContactContainsFold applies the ContainsFold predicate on the "contact" field.
func ContactContainsFold(v string) predicate.Order {
	return predicate.Order(sql.FieldContainsFold(FieldContact, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldType, vs...))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldStatus, vs...))
}

// EvaluationEQ applies the EQ predicate on the "evaluation" field.
func EvaluationEQ(v float64) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldEvaluation, v))
}

// EvaluationNEQ applies the NEQ predicate on the "evaluation" field.
func EvaluationNEQ(v float64) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldEvaluation, v))
}

// EvaluationIn applies the In predicate on the "evaluation" field.
func EvaluationIn(vs ...float64) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldEvaluation, vs...))
}

// EvaluationNotIn applies the NotIn predicate on the "evaluation" field.
func EvaluationNotIn(vs ...float64) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldEvaluation, vs...))
}

// EvaluationGT applies the GT predicate on the "evaluation" field.
func EvaluationGT(v float64) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldEvaluation, v))
}

// EvaluationGTE applies the GTE predicate on the "evaluation" field.
func EvaluationGTE(v float64) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldEvaluation, v))
}

// EvaluationLT applies the LT predicate on the "evaluation" field.
func EvaluationLT(v float64) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldEvaluation, v))
}

// EvaluationLTE applies the LTE predicate on the "evaluation" field.
func EvaluationLTE(v float64) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldEvaluation, v))
}

// EvaluationIsNil applies the IsNil predicate on the "evaluation" field.
func EvaluationIsNil() predicate.Order {
	return predicate.Order(sql.FieldIsNull(FieldEvaluation))
}

// EvaluationNotNil applies the NotNil predicate on the "evaluation" field.
func EvaluationNotNil() predicate.Order {
	return predicate.Order(sql.FieldNotNull(FieldEvaluation))
}

// HopeAtEQ applies the EQ predicate on the "hope_at" field.
func HopeAtEQ(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldHopeAt, v))
}

// HopeAtNEQ applies the NEQ predicate on the "hope_at" field.
func HopeAtNEQ(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldHopeAt, v))
}

// HopeAtIn applies the In predicate on the "hope_at" field.
func HopeAtIn(vs ...time.Time) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldHopeAt, vs...))
}

// HopeAtNotIn applies the NotIn predicate on the "hope_at" field.
func HopeAtNotIn(vs ...time.Time) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldHopeAt, vs...))
}

// HopeAtGT applies the GT predicate on the "hope_at" field.
func HopeAtGT(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldHopeAt, v))
}

// HopeAtGTE applies the GTE predicate on the "hope_at" field.
func HopeAtGTE(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldHopeAt, v))
}

// HopeAtLT applies the LT predicate on the "hope_at" field.
func HopeAtLT(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldHopeAt, v))
}

// HopeAtLTE applies the LTE predicate on the "hope_at" field.
func HopeAtLTE(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldHopeAt, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasRequester applies the HasEdge predicate on the "requester" edge.
func HasRequester() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RequesterTable, RequesterColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRequesterWith applies the HasEdge predicate on the "requester" edge with a given conditions (other predicates).
func HasRequesterWith(preds ...predicate.User) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := newRequesterStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasReceives applies the HasEdge predicate on the "receives" edge.
func HasReceives() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, ReceivesTable, ReceivesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReceivesWith applies the HasEdge predicate on the "receives" edge with a given conditions (other predicates).
func HasReceivesWith(preds ...predicate.User) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := newReceivesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Order) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Order) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Order) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		p(s.Not())
	})
}
