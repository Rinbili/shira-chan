// Code generated by ent, DO NOT EDIT.

package order

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the order type in the database.
	Label = "order"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldContent holds the string denoting the content field in the database.
	FieldContent = "content"
	// FieldContact holds the string denoting the contact field in the database.
	FieldContact = "contact"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldIsClosed holds the string denoting the is_closed field in the database.
	FieldIsClosed = "is_closed"
	// FieldIsFinished holds the string denoting the is_finished field in the database.
	FieldIsFinished = "is_finished"
	// FieldEvaluation holds the string denoting the evaluation field in the database.
	FieldEvaluation = "evaluation"
	// FieldHopeAt holds the string denoting the hope_at field in the database.
	FieldHopeAt = "hope_at"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeRequester holds the string denoting the requester edge name in mutations.
	EdgeRequester = "requester"
	// EdgeReceiver holds the string denoting the receiver edge name in mutations.
	EdgeReceiver = "receiver"
	// Table holds the table name of the order in the database.
	Table = "Orders"
	// RequesterTable is the table that holds the requester relation/edge.
	RequesterTable = "Orders"
	// RequesterInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	RequesterInverseTable = "Users"
	// RequesterColumn is the table column denoting the requester relation/edge.
	RequesterColumn = "user_requested"
	// ReceiverTable is the table that holds the receiver relation/edge. The primary key declared below.
	ReceiverTable = "order_receiver"
	// ReceiverInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	ReceiverInverseTable = "Users"
)

// Columns holds all SQL columns for order fields.
var Columns = []string{
	FieldID,
	FieldTitle,
	FieldContent,
	FieldContact,
	FieldType,
	FieldIsClosed,
	FieldIsFinished,
	FieldEvaluation,
	FieldHopeAt,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "Orders"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_requested",
}

var (
	// ReceiverPrimaryKey and ReceiverColumn2 are the table columns denoting the
	// primary key for the receiver relation (M2M).
	ReceiverPrimaryKey = []string{"order_id", "user_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// TitleValidator is a validator for the "title" field. It is called by the builders before save.
	TitleValidator func(string) error
	// ContentValidator is a validator for the "content" field. It is called by the builders before save.
	ContentValidator func(string) error
	// ContactValidator is a validator for the "contact" field. It is called by the builders before save.
	ContactValidator func(string) error
	// DefaultType holds the default value on creation for the "type" field.
	DefaultType string
	// DefaultIsClosed holds the default value on creation for the "is_closed" field.
	DefaultIsClosed bool
	// DefaultIsFinished holds the default value on creation for the "is_finished" field.
	DefaultIsFinished bool
	// EvaluationValidator is a validator for the "evaluation" field. It is called by the builders before save.
	EvaluationValidator func(float64) error
	// DefaultHopeAt holds the default value on creation for the "hope_at" field.
	DefaultHopeAt func() int64
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() int64
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() int64
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() int64
)

// OrderOption defines the ordering options for the Order queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByContent orders the results by the content field.
func ByContent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContent, opts...).ToFunc()
}

// ByContact orders the results by the contact field.
func ByContact(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContact, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByIsClosed orders the results by the is_closed field.
func ByIsClosed(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsClosed, opts...).ToFunc()
}

// ByIsFinished orders the results by the is_finished field.
func ByIsFinished(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsFinished, opts...).ToFunc()
}

// ByEvaluation orders the results by the evaluation field.
func ByEvaluation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEvaluation, opts...).ToFunc()
}

// ByHopeAt orders the results by the hope_at field.
func ByHopeAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHopeAt, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByRequesterField orders the results by requester field.
func ByRequesterField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRequesterStep(), sql.OrderByField(field, opts...))
	}
}

// ByReceiverCount orders the results by receiver count.
func ByReceiverCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newReceiverStep(), opts...)
	}
}

// ByReceiver orders the results by receiver terms.
func ByReceiver(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newReceiverStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newRequesterStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RequesterInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, RequesterTable, RequesterColumn),
	)
}
func newReceiverStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ReceiverInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, ReceiverTable, ReceiverPrimaryKey...),
	)
}
