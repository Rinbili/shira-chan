// Code generated by ent, DO NOT EDIT.

package user

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUname holds the string denoting the uname field in the database.
	FieldUname = "uname"
	// FieldPasswd holds the string denoting the passwd field in the database.
	FieldPasswd = "passwd"
	// FieldPhone holds the string denoting the phone field in the database.
	FieldPhone = "phone"
	// FieldWechat holds the string denoting the wechat field in the database.
	FieldWechat = "wechat"
	// FieldLevel holds the string denoting the level field in the database.
	FieldLevel = "level"
	// FieldDept holds the string denoting the dept field in the database.
	FieldDept = "dept"
	// FieldState holds the string denoting the state field in the database.
	FieldState = "state"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeRequests holds the string denoting the requests edge name in mutations.
	EdgeRequests = "requests"
	// EdgeReceiver holds the string denoting the receiver edge name in mutations.
	EdgeReceiver = "receiver"
	// Table holds the table name of the user in the database.
	Table = "Users"
	// RequestsTable is the table that holds the requests relation/edge.
	RequestsTable = "Orders"
	// RequestsInverseTable is the table name for the Order entity.
	// It exists in this package in order to avoid circular dependency with the "order" package.
	RequestsInverseTable = "Orders"
	// RequestsColumn is the table column denoting the requests relation/edge.
	RequestsColumn = "user_requests"
	// ReceiverTable is the table that holds the receiver relation/edge. The primary key declared below.
	ReceiverTable = "order_receives"
	// ReceiverInverseTable is the table name for the Order entity.
	// It exists in this package in order to avoid circular dependency with the "order" package.
	ReceiverInverseTable = "Orders"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldUname,
	FieldPasswd,
	FieldPhone,
	FieldWechat,
	FieldLevel,
	FieldDept,
	FieldState,
	FieldCreatedAt,
	FieldUpdatedAt,
}

var (
	// ReceiverPrimaryKey and ReceiverColumn2 are the table columns denoting the
	// primary key for the receiver relation (M2M).
	ReceiverPrimaryKey = []string{"order_id", "user_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// UnameValidator is a validator for the "uname" field. It is called by the builders before save.
	UnameValidator func(string) error
	// PasswdValidator is a validator for the "passwd" field. It is called by the builders before save.
	PasswdValidator func(string) error
	// PhoneValidator is a validator for the "phone" field. It is called by the builders before save.
	PhoneValidator func(string) error
	// DefaultWechat holds the default value on creation for the "wechat" field.
	DefaultWechat string
	// WechatValidator is a validator for the "wechat" field. It is called by the builders before save.
	WechatValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// Level defines the type for the "level" enum field.
type Level string

// LevelUSER is the default value of the Level enum.
const DefaultLevel = LevelUSER

// Level values.
const (
	LevelROOT      Level = "root"
	LevelADMIN     Level = "admin"
	LevelPRESIDENT Level = "president"
	LevelMINISTER  Level = "minister"
	LevelMEMBER    Level = "member"
	LevelUSER      Level = "user"
	LevelBANNED    Level = "banned"
)

func (l Level) String() string {
	return string(l)
}

// LevelValidator is a validator for the "level" field enum values. It is called by the builders before save.
func LevelValidator(l Level) error {
	switch l {
	case LevelROOT, LevelADMIN, LevelPRESIDENT, LevelMINISTER, LevelMEMBER, LevelUSER, LevelBANNED:
		return nil
	default:
		return fmt.Errorf("user: invalid enum value for level field: %q", l)
	}
}

// Dept defines the type for the "dept" enum field.
type Dept string

// DeptNONE is the default value of the Dept enum.
const DefaultDept = DeptNONE

// Dept values.
const (
	DeptNONE Dept = "none"
)

func (d Dept) String() string {
	return string(d)
}

// DeptValidator is a validator for the "dept" field enum values. It is called by the builders before save.
func DeptValidator(d Dept) error {
	switch d {
	case DeptNONE:
		return nil
	default:
		return fmt.Errorf("user: invalid enum value for dept field: %q", d)
	}
}

// State defines the type for the "state" enum field.
type State string

// StateON is the default value of the State enum.
const DefaultState = StateON

// State values.
const (
	StateON  State = "on"
	StateOFF State = "off"
)

func (s State) String() string {
	return string(s)
}

// StateValidator is a validator for the "state" field enum values. It is called by the builders before save.
func StateValidator(s State) error {
	switch s {
	case StateON, StateOFF:
		return nil
	default:
		return fmt.Errorf("user: invalid enum value for state field: %q", s)
	}
}

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUname orders the results by the uname field.
func ByUname(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUname, opts...).ToFunc()
}

// ByPasswd orders the results by the passwd field.
func ByPasswd(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPasswd, opts...).ToFunc()
}

// ByPhone orders the results by the phone field.
func ByPhone(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhone, opts...).ToFunc()
}

// ByWechat orders the results by the wechat field.
func ByWechat(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWechat, opts...).ToFunc()
}

// ByLevel orders the results by the level field.
func ByLevel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLevel, opts...).ToFunc()
}

// ByDept orders the results by the dept field.
func ByDept(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDept, opts...).ToFunc()
}

// ByState orders the results by the state field.
func ByState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldState, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByRequestsCount orders the results by requests count.
func ByRequestsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRequestsStep(), opts...)
	}
}

// ByRequests orders the results by requests terms.
func ByRequests(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRequestsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByReceiverCount orders the results by receiver count.
func ByReceiverCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newReceiverStep(), opts...)
	}
}

// ByReceiver orders the results by receiver terms.
func ByReceiver(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newReceiverStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newRequestsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RequestsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RequestsTable, RequestsColumn),
	)
}
func newReceiverStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ReceiverInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, ReceiverTable, ReceiverPrimaryKey...),
	)
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Level) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Level) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Level(str)
	if err := LevelValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Level", str)
	}
	return nil
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Dept) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Dept) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Dept(str)
	if err := DeptValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Dept", str)
	}
	return nil
}

// MarshalGQL implements graphql.Marshaler interface.
func (e State) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *State) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = State(str)
	if err := StateValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid State", str)
	}
	return nil
}
