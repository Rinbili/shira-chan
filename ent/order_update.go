// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"shira-chan-dev/ent/order"
	"shira-chan-dev/ent/predicate"
	"shira-chan-dev/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrderUpdate is the builder for updating Order entities.
type OrderUpdate struct {
	config
	hooks    []Hook
	mutation *OrderMutation
}

// Where appends a list predicates to the OrderUpdate builder.
func (ou *OrderUpdate) Where(ps ...predicate.Order) *OrderUpdate {
	ou.mutation.Where(ps...)
	return ou
}

// SetTitle sets the "title" field.
func (ou *OrderUpdate) SetTitle(s string) *OrderUpdate {
	ou.mutation.SetTitle(s)
	return ou
}

// SetContent sets the "content" field.
func (ou *OrderUpdate) SetContent(s string) *OrderUpdate {
	ou.mutation.SetContent(s)
	return ou
}

// SetContact sets the "contact" field.
func (ou *OrderUpdate) SetContact(s string) *OrderUpdate {
	ou.mutation.SetContact(s)
	return ou
}

// SetType sets the "type" field.
func (ou *OrderUpdate) SetType(s string) *OrderUpdate {
	ou.mutation.SetType(s)
	return ou
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableType(s *string) *OrderUpdate {
	if s != nil {
		ou.SetType(*s)
	}
	return ou
}

// SetIsClosed sets the "is_closed" field.
func (ou *OrderUpdate) SetIsClosed(b bool) *OrderUpdate {
	ou.mutation.SetIsClosed(b)
	return ou
}

// SetNillableIsClosed sets the "is_closed" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableIsClosed(b *bool) *OrderUpdate {
	if b != nil {
		ou.SetIsClosed(*b)
	}
	return ou
}

// SetIsFinished sets the "is_finished" field.
func (ou *OrderUpdate) SetIsFinished(b bool) *OrderUpdate {
	ou.mutation.SetIsFinished(b)
	return ou
}

// SetNillableIsFinished sets the "is_finished" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableIsFinished(b *bool) *OrderUpdate {
	if b != nil {
		ou.SetIsFinished(*b)
	}
	return ou
}

// SetEvaluation sets the "evaluation" field.
func (ou *OrderUpdate) SetEvaluation(f float64) *OrderUpdate {
	ou.mutation.ResetEvaluation()
	ou.mutation.SetEvaluation(f)
	return ou
}

// SetNillableEvaluation sets the "evaluation" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableEvaluation(f *float64) *OrderUpdate {
	if f != nil {
		ou.SetEvaluation(*f)
	}
	return ou
}

// AddEvaluation adds f to the "evaluation" field.
func (ou *OrderUpdate) AddEvaluation(f float64) *OrderUpdate {
	ou.mutation.AddEvaluation(f)
	return ou
}

// ClearEvaluation clears the value of the "evaluation" field.
func (ou *OrderUpdate) ClearEvaluation() *OrderUpdate {
	ou.mutation.ClearEvaluation()
	return ou
}

// SetHopeAt sets the "hope_at" field.
func (ou *OrderUpdate) SetHopeAt(i int64) *OrderUpdate {
	ou.mutation.ResetHopeAt()
	ou.mutation.SetHopeAt(i)
	return ou
}

// SetNillableHopeAt sets the "hope_at" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableHopeAt(i *int64) *OrderUpdate {
	if i != nil {
		ou.SetHopeAt(*i)
	}
	return ou
}

// AddHopeAt adds i to the "hope_at" field.
func (ou *OrderUpdate) AddHopeAt(i int64) *OrderUpdate {
	ou.mutation.AddHopeAt(i)
	return ou
}

// SetUpdatedAt sets the "updated_at" field.
func (ou *OrderUpdate) SetUpdatedAt(i int64) *OrderUpdate {
	ou.mutation.ResetUpdatedAt()
	ou.mutation.SetUpdatedAt(i)
	return ou
}

// AddUpdatedAt adds i to the "updated_at" field.
func (ou *OrderUpdate) AddUpdatedAt(i int64) *OrderUpdate {
	ou.mutation.AddUpdatedAt(i)
	return ou
}

// SetRequesterID sets the "requester" edge to the User entity by ID.
func (ou *OrderUpdate) SetRequesterID(id int) *OrderUpdate {
	ou.mutation.SetRequesterID(id)
	return ou
}

// SetNillableRequesterID sets the "requester" edge to the User entity by ID if the given value is not nil.
func (ou *OrderUpdate) SetNillableRequesterID(id *int) *OrderUpdate {
	if id != nil {
		ou = ou.SetRequesterID(*id)
	}
	return ou
}

// SetRequester sets the "requester" edge to the User entity.
func (ou *OrderUpdate) SetRequester(u *User) *OrderUpdate {
	return ou.SetRequesterID(u.ID)
}

// AddReceiverIDs adds the "receiver" edge to the User entity by IDs.
func (ou *OrderUpdate) AddReceiverIDs(ids ...int) *OrderUpdate {
	ou.mutation.AddReceiverIDs(ids...)
	return ou
}

// AddReceiver adds the "receiver" edges to the User entity.
func (ou *OrderUpdate) AddReceiver(u ...*User) *OrderUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ou.AddReceiverIDs(ids...)
}

// Mutation returns the OrderMutation object of the builder.
func (ou *OrderUpdate) Mutation() *OrderMutation {
	return ou.mutation
}

// ClearRequester clears the "requester" edge to the User entity.
func (ou *OrderUpdate) ClearRequester() *OrderUpdate {
	ou.mutation.ClearRequester()
	return ou
}

// ClearReceiver clears all "receiver" edges to the User entity.
func (ou *OrderUpdate) ClearReceiver() *OrderUpdate {
	ou.mutation.ClearReceiver()
	return ou
}

// RemoveReceiverIDs removes the "receiver" edge to User entities by IDs.
func (ou *OrderUpdate) RemoveReceiverIDs(ids ...int) *OrderUpdate {
	ou.mutation.RemoveReceiverIDs(ids...)
	return ou
}

// RemoveReceiver removes "receiver" edges to User entities.
func (ou *OrderUpdate) RemoveReceiver(u ...*User) *OrderUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ou.RemoveReceiverIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ou *OrderUpdate) Save(ctx context.Context) (int, error) {
	ou.defaults()
	return withHooks(ctx, ou.sqlSave, ou.mutation, ou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ou *OrderUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *OrderUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *OrderUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ou *OrderUpdate) defaults() {
	if _, ok := ou.mutation.UpdatedAt(); !ok {
		v := order.UpdateDefaultUpdatedAt()
		ou.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ou *OrderUpdate) check() error {
	if v, ok := ou.mutation.Title(); ok {
		if err := order.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Order.title": %w`, err)}
		}
	}
	if v, ok := ou.mutation.Content(); ok {
		if err := order.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "Order.content": %w`, err)}
		}
	}
	if v, ok := ou.mutation.Contact(); ok {
		if err := order.ContactValidator(v); err != nil {
			return &ValidationError{Name: "contact", err: fmt.Errorf(`ent: validator failed for field "Order.contact": %w`, err)}
		}
	}
	if v, ok := ou.mutation.Evaluation(); ok {
		if err := order.EvaluationValidator(v); err != nil {
			return &ValidationError{Name: "evaluation", err: fmt.Errorf(`ent: validator failed for field "Order.evaluation": %w`, err)}
		}
	}
	return nil
}

func (ou *OrderUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ou.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(order.Table, order.Columns, sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt))
	if ps := ou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ou.mutation.Title(); ok {
		_spec.SetField(order.FieldTitle, field.TypeString, value)
	}
	if value, ok := ou.mutation.Content(); ok {
		_spec.SetField(order.FieldContent, field.TypeString, value)
	}
	if value, ok := ou.mutation.Contact(); ok {
		_spec.SetField(order.FieldContact, field.TypeString, value)
	}
	if value, ok := ou.mutation.GetType(); ok {
		_spec.SetField(order.FieldType, field.TypeString, value)
	}
	if value, ok := ou.mutation.IsClosed(); ok {
		_spec.SetField(order.FieldIsClosed, field.TypeBool, value)
	}
	if value, ok := ou.mutation.IsFinished(); ok {
		_spec.SetField(order.FieldIsFinished, field.TypeBool, value)
	}
	if value, ok := ou.mutation.Evaluation(); ok {
		_spec.SetField(order.FieldEvaluation, field.TypeFloat64, value)
	}
	if value, ok := ou.mutation.AddedEvaluation(); ok {
		_spec.AddField(order.FieldEvaluation, field.TypeFloat64, value)
	}
	if ou.mutation.EvaluationCleared() {
		_spec.ClearField(order.FieldEvaluation, field.TypeFloat64)
	}
	if value, ok := ou.mutation.HopeAt(); ok {
		_spec.SetField(order.FieldHopeAt, field.TypeInt64, value)
	}
	if value, ok := ou.mutation.AddedHopeAt(); ok {
		_spec.AddField(order.FieldHopeAt, field.TypeInt64, value)
	}
	if value, ok := ou.mutation.UpdatedAt(); ok {
		_spec.SetField(order.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := ou.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(order.FieldUpdatedAt, field.TypeInt64, value)
	}
	if ou.mutation.RequesterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.RequesterTable,
			Columns: []string{order.RequesterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RequesterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.RequesterTable,
			Columns: []string{order.RequesterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.ReceiverCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   order.ReceiverTable,
			Columns: order.ReceiverPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedReceiverIDs(); len(nodes) > 0 && !ou.mutation.ReceiverCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   order.ReceiverTable,
			Columns: order.ReceiverPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.ReceiverIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   order.ReceiverTable,
			Columns: order.ReceiverPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{order.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ou.mutation.done = true
	return n, nil
}

// OrderUpdateOne is the builder for updating a single Order entity.
type OrderUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrderMutation
}

// SetTitle sets the "title" field.
func (ouo *OrderUpdateOne) SetTitle(s string) *OrderUpdateOne {
	ouo.mutation.SetTitle(s)
	return ouo
}

// SetContent sets the "content" field.
func (ouo *OrderUpdateOne) SetContent(s string) *OrderUpdateOne {
	ouo.mutation.SetContent(s)
	return ouo
}

// SetContact sets the "contact" field.
func (ouo *OrderUpdateOne) SetContact(s string) *OrderUpdateOne {
	ouo.mutation.SetContact(s)
	return ouo
}

// SetType sets the "type" field.
func (ouo *OrderUpdateOne) SetType(s string) *OrderUpdateOne {
	ouo.mutation.SetType(s)
	return ouo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableType(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetType(*s)
	}
	return ouo
}

// SetIsClosed sets the "is_closed" field.
func (ouo *OrderUpdateOne) SetIsClosed(b bool) *OrderUpdateOne {
	ouo.mutation.SetIsClosed(b)
	return ouo
}

// SetNillableIsClosed sets the "is_closed" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableIsClosed(b *bool) *OrderUpdateOne {
	if b != nil {
		ouo.SetIsClosed(*b)
	}
	return ouo
}

// SetIsFinished sets the "is_finished" field.
func (ouo *OrderUpdateOne) SetIsFinished(b bool) *OrderUpdateOne {
	ouo.mutation.SetIsFinished(b)
	return ouo
}

// SetNillableIsFinished sets the "is_finished" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableIsFinished(b *bool) *OrderUpdateOne {
	if b != nil {
		ouo.SetIsFinished(*b)
	}
	return ouo
}

// SetEvaluation sets the "evaluation" field.
func (ouo *OrderUpdateOne) SetEvaluation(f float64) *OrderUpdateOne {
	ouo.mutation.ResetEvaluation()
	ouo.mutation.SetEvaluation(f)
	return ouo
}

// SetNillableEvaluation sets the "evaluation" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableEvaluation(f *float64) *OrderUpdateOne {
	if f != nil {
		ouo.SetEvaluation(*f)
	}
	return ouo
}

// AddEvaluation adds f to the "evaluation" field.
func (ouo *OrderUpdateOne) AddEvaluation(f float64) *OrderUpdateOne {
	ouo.mutation.AddEvaluation(f)
	return ouo
}

// ClearEvaluation clears the value of the "evaluation" field.
func (ouo *OrderUpdateOne) ClearEvaluation() *OrderUpdateOne {
	ouo.mutation.ClearEvaluation()
	return ouo
}

// SetHopeAt sets the "hope_at" field.
func (ouo *OrderUpdateOne) SetHopeAt(i int64) *OrderUpdateOne {
	ouo.mutation.ResetHopeAt()
	ouo.mutation.SetHopeAt(i)
	return ouo
}

// SetNillableHopeAt sets the "hope_at" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableHopeAt(i *int64) *OrderUpdateOne {
	if i != nil {
		ouo.SetHopeAt(*i)
	}
	return ouo
}

// AddHopeAt adds i to the "hope_at" field.
func (ouo *OrderUpdateOne) AddHopeAt(i int64) *OrderUpdateOne {
	ouo.mutation.AddHopeAt(i)
	return ouo
}

// SetUpdatedAt sets the "updated_at" field.
func (ouo *OrderUpdateOne) SetUpdatedAt(i int64) *OrderUpdateOne {
	ouo.mutation.ResetUpdatedAt()
	ouo.mutation.SetUpdatedAt(i)
	return ouo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (ouo *OrderUpdateOne) AddUpdatedAt(i int64) *OrderUpdateOne {
	ouo.mutation.AddUpdatedAt(i)
	return ouo
}

// SetRequesterID sets the "requester" edge to the User entity by ID.
func (ouo *OrderUpdateOne) SetRequesterID(id int) *OrderUpdateOne {
	ouo.mutation.SetRequesterID(id)
	return ouo
}

// SetNillableRequesterID sets the "requester" edge to the User entity by ID if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableRequesterID(id *int) *OrderUpdateOne {
	if id != nil {
		ouo = ouo.SetRequesterID(*id)
	}
	return ouo
}

// SetRequester sets the "requester" edge to the User entity.
func (ouo *OrderUpdateOne) SetRequester(u *User) *OrderUpdateOne {
	return ouo.SetRequesterID(u.ID)
}

// AddReceiverIDs adds the "receiver" edge to the User entity by IDs.
func (ouo *OrderUpdateOne) AddReceiverIDs(ids ...int) *OrderUpdateOne {
	ouo.mutation.AddReceiverIDs(ids...)
	return ouo
}

// AddReceiver adds the "receiver" edges to the User entity.
func (ouo *OrderUpdateOne) AddReceiver(u ...*User) *OrderUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ouo.AddReceiverIDs(ids...)
}

// Mutation returns the OrderMutation object of the builder.
func (ouo *OrderUpdateOne) Mutation() *OrderMutation {
	return ouo.mutation
}

// ClearRequester clears the "requester" edge to the User entity.
func (ouo *OrderUpdateOne) ClearRequester() *OrderUpdateOne {
	ouo.mutation.ClearRequester()
	return ouo
}

// ClearReceiver clears all "receiver" edges to the User entity.
func (ouo *OrderUpdateOne) ClearReceiver() *OrderUpdateOne {
	ouo.mutation.ClearReceiver()
	return ouo
}

// RemoveReceiverIDs removes the "receiver" edge to User entities by IDs.
func (ouo *OrderUpdateOne) RemoveReceiverIDs(ids ...int) *OrderUpdateOne {
	ouo.mutation.RemoveReceiverIDs(ids...)
	return ouo
}

// RemoveReceiver removes "receiver" edges to User entities.
func (ouo *OrderUpdateOne) RemoveReceiver(u ...*User) *OrderUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ouo.RemoveReceiverIDs(ids...)
}

// Where appends a list predicates to the OrderUpdate builder.
func (ouo *OrderUpdateOne) Where(ps ...predicate.Order) *OrderUpdateOne {
	ouo.mutation.Where(ps...)
	return ouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ouo *OrderUpdateOne) Select(field string, fields ...string) *OrderUpdateOne {
	ouo.fields = append([]string{field}, fields...)
	return ouo
}

// Save executes the query and returns the updated Order entity.
func (ouo *OrderUpdateOne) Save(ctx context.Context) (*Order, error) {
	ouo.defaults()
	return withHooks(ctx, ouo.sqlSave, ouo.mutation, ouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *OrderUpdateOne) SaveX(ctx context.Context) *Order {
	node, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ouo *OrderUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *OrderUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ouo *OrderUpdateOne) defaults() {
	if _, ok := ouo.mutation.UpdatedAt(); !ok {
		v := order.UpdateDefaultUpdatedAt()
		ouo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ouo *OrderUpdateOne) check() error {
	if v, ok := ouo.mutation.Title(); ok {
		if err := order.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Order.title": %w`, err)}
		}
	}
	if v, ok := ouo.mutation.Content(); ok {
		if err := order.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "Order.content": %w`, err)}
		}
	}
	if v, ok := ouo.mutation.Contact(); ok {
		if err := order.ContactValidator(v); err != nil {
			return &ValidationError{Name: "contact", err: fmt.Errorf(`ent: validator failed for field "Order.contact": %w`, err)}
		}
	}
	if v, ok := ouo.mutation.Evaluation(); ok {
		if err := order.EvaluationValidator(v); err != nil {
			return &ValidationError{Name: "evaluation", err: fmt.Errorf(`ent: validator failed for field "Order.evaluation": %w`, err)}
		}
	}
	return nil
}

func (ouo *OrderUpdateOne) sqlSave(ctx context.Context) (_node *Order, err error) {
	if err := ouo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(order.Table, order.Columns, sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt))
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Order.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, order.FieldID)
		for _, f := range fields {
			if !order.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != order.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ouo.mutation.Title(); ok {
		_spec.SetField(order.FieldTitle, field.TypeString, value)
	}
	if value, ok := ouo.mutation.Content(); ok {
		_spec.SetField(order.FieldContent, field.TypeString, value)
	}
	if value, ok := ouo.mutation.Contact(); ok {
		_spec.SetField(order.FieldContact, field.TypeString, value)
	}
	if value, ok := ouo.mutation.GetType(); ok {
		_spec.SetField(order.FieldType, field.TypeString, value)
	}
	if value, ok := ouo.mutation.IsClosed(); ok {
		_spec.SetField(order.FieldIsClosed, field.TypeBool, value)
	}
	if value, ok := ouo.mutation.IsFinished(); ok {
		_spec.SetField(order.FieldIsFinished, field.TypeBool, value)
	}
	if value, ok := ouo.mutation.Evaluation(); ok {
		_spec.SetField(order.FieldEvaluation, field.TypeFloat64, value)
	}
	if value, ok := ouo.mutation.AddedEvaluation(); ok {
		_spec.AddField(order.FieldEvaluation, field.TypeFloat64, value)
	}
	if ouo.mutation.EvaluationCleared() {
		_spec.ClearField(order.FieldEvaluation, field.TypeFloat64)
	}
	if value, ok := ouo.mutation.HopeAt(); ok {
		_spec.SetField(order.FieldHopeAt, field.TypeInt64, value)
	}
	if value, ok := ouo.mutation.AddedHopeAt(); ok {
		_spec.AddField(order.FieldHopeAt, field.TypeInt64, value)
	}
	if value, ok := ouo.mutation.UpdatedAt(); ok {
		_spec.SetField(order.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := ouo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(order.FieldUpdatedAt, field.TypeInt64, value)
	}
	if ouo.mutation.RequesterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.RequesterTable,
			Columns: []string{order.RequesterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RequesterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.RequesterTable,
			Columns: []string{order.RequesterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.ReceiverCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   order.ReceiverTable,
			Columns: order.ReceiverPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedReceiverIDs(); len(nodes) > 0 && !ouo.mutation.ReceiverCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   order.ReceiverTable,
			Columns: order.ReceiverPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.ReceiverIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   order.ReceiverTable,
			Columns: order.ReceiverPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Order{config: ouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{order.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ouo.mutation.done = true
	return _node, nil
}
