// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"shira-chan-dev/ent/order"
	"shira-chan-dev/ent/predicate"
	"shira-chan-dev/ent/receive"
	"shira-chan-dev/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ReceiveUpdate is the builder for updating Receive entities.
type ReceiveUpdate struct {
	config
	hooks    []Hook
	mutation *ReceiveMutation
}

// Where appends a list predicates to the ReceiveUpdate builder.
func (ru *ReceiveUpdate) Where(ps ...predicate.Receive) *ReceiveUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetUpdatedAt sets the "updated_at" field.
func (ru *ReceiveUpdate) SetUpdatedAt(i int64) *ReceiveUpdate {
	ru.mutation.ResetUpdatedAt()
	ru.mutation.SetUpdatedAt(i)
	return ru
}

// AddUpdatedAt adds i to the "updated_at" field.
func (ru *ReceiveUpdate) AddUpdatedAt(i int64) *ReceiveUpdate {
	ru.mutation.AddUpdatedAt(i)
	return ru
}

// SetUserID sets the "user_id" field.
func (ru *ReceiveUpdate) SetUserID(i int) *ReceiveUpdate {
	ru.mutation.SetUserID(i)
	return ru
}

// SetOrderID sets the "order_id" field.
func (ru *ReceiveUpdate) SetOrderID(i int) *ReceiveUpdate {
	ru.mutation.SetOrderID(i)
	return ru
}

// SetUser sets the "user" edge to the User entity.
func (ru *ReceiveUpdate) SetUser(u *User) *ReceiveUpdate {
	return ru.SetUserID(u.ID)
}

// SetOrder sets the "order" edge to the Order entity.
func (ru *ReceiveUpdate) SetOrder(o *Order) *ReceiveUpdate {
	return ru.SetOrderID(o.ID)
}

// Mutation returns the ReceiveMutation object of the builder.
func (ru *ReceiveUpdate) Mutation() *ReceiveMutation {
	return ru.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (ru *ReceiveUpdate) ClearUser() *ReceiveUpdate {
	ru.mutation.ClearUser()
	return ru
}

// ClearOrder clears the "order" edge to the Order entity.
func (ru *ReceiveUpdate) ClearOrder() *ReceiveUpdate {
	ru.mutation.ClearOrder()
	return ru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *ReceiveUpdate) Save(ctx context.Context) (int, error) {
	ru.defaults()
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *ReceiveUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *ReceiveUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *ReceiveUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ru *ReceiveUpdate) defaults() {
	if _, ok := ru.mutation.UpdatedAt(); !ok {
		v := receive.UpdateDefaultUpdatedAt()
		ru.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ru *ReceiveUpdate) check() error {
	if _, ok := ru.mutation.UserID(); ru.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Receive.user"`)
	}
	if _, ok := ru.mutation.OrderID(); ru.mutation.OrderCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Receive.order"`)
	}
	return nil
}

func (ru *ReceiveUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(receive.Table, receive.Columns, sqlgraph.NewFieldSpec(receive.FieldOrderID, field.TypeInt), sqlgraph.NewFieldSpec(receive.FieldUserID, field.TypeInt))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.UpdatedAt(); ok {
		_spec.SetField(receive.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := ru.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(receive.FieldUpdatedAt, field.TypeInt64, value)
	}
	if ru.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   receive.UserTable,
			Columns: []string{receive.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   receive.UserTable,
			Columns: []string{receive.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   receive.OrderTable,
			Columns: []string{receive.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   receive.OrderTable,
			Columns: []string{receive.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{receive.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// ReceiveUpdateOne is the builder for updating a single Receive entity.
type ReceiveUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ReceiveMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (ruo *ReceiveUpdateOne) SetUpdatedAt(i int64) *ReceiveUpdateOne {
	ruo.mutation.ResetUpdatedAt()
	ruo.mutation.SetUpdatedAt(i)
	return ruo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (ruo *ReceiveUpdateOne) AddUpdatedAt(i int64) *ReceiveUpdateOne {
	ruo.mutation.AddUpdatedAt(i)
	return ruo
}

// SetUserID sets the "user_id" field.
func (ruo *ReceiveUpdateOne) SetUserID(i int) *ReceiveUpdateOne {
	ruo.mutation.SetUserID(i)
	return ruo
}

// SetOrderID sets the "order_id" field.
func (ruo *ReceiveUpdateOne) SetOrderID(i int) *ReceiveUpdateOne {
	ruo.mutation.SetOrderID(i)
	return ruo
}

// SetUser sets the "user" edge to the User entity.
func (ruo *ReceiveUpdateOne) SetUser(u *User) *ReceiveUpdateOne {
	return ruo.SetUserID(u.ID)
}

// SetOrder sets the "order" edge to the Order entity.
func (ruo *ReceiveUpdateOne) SetOrder(o *Order) *ReceiveUpdateOne {
	return ruo.SetOrderID(o.ID)
}

// Mutation returns the ReceiveMutation object of the builder.
func (ruo *ReceiveUpdateOne) Mutation() *ReceiveMutation {
	return ruo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (ruo *ReceiveUpdateOne) ClearUser() *ReceiveUpdateOne {
	ruo.mutation.ClearUser()
	return ruo
}

// ClearOrder clears the "order" edge to the Order entity.
func (ruo *ReceiveUpdateOne) ClearOrder() *ReceiveUpdateOne {
	ruo.mutation.ClearOrder()
	return ruo
}

// Where appends a list predicates to the ReceiveUpdate builder.
func (ruo *ReceiveUpdateOne) Where(ps ...predicate.Receive) *ReceiveUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *ReceiveUpdateOne) Select(field string, fields ...string) *ReceiveUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Receive entity.
func (ruo *ReceiveUpdateOne) Save(ctx context.Context) (*Receive, error) {
	ruo.defaults()
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *ReceiveUpdateOne) SaveX(ctx context.Context) *Receive {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *ReceiveUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *ReceiveUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ruo *ReceiveUpdateOne) defaults() {
	if _, ok := ruo.mutation.UpdatedAt(); !ok {
		v := receive.UpdateDefaultUpdatedAt()
		ruo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruo *ReceiveUpdateOne) check() error {
	if _, ok := ruo.mutation.UserID(); ruo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Receive.user"`)
	}
	if _, ok := ruo.mutation.OrderID(); ruo.mutation.OrderCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Receive.order"`)
	}
	return nil
}

func (ruo *ReceiveUpdateOne) sqlSave(ctx context.Context) (_node *Receive, err error) {
	if err := ruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(receive.Table, receive.Columns, sqlgraph.NewFieldSpec(receive.FieldOrderID, field.TypeInt), sqlgraph.NewFieldSpec(receive.FieldUserID, field.TypeInt))
	if id, ok := ruo.mutation.OrderID(); !ok {
		return nil, &ValidationError{Name: "order_id", err: errors.New(`ent: missing "Receive.order_id" for update`)}
	} else {
		_spec.Node.CompositeID[0].Value = id
	}
	if id, ok := ruo.mutation.UserID(); !ok {
		return nil, &ValidationError{Name: "user_id", err: errors.New(`ent: missing "Receive.user_id" for update`)}
	} else {
		_spec.Node.CompositeID[1].Value = id
	}
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, len(fields))
		for i, f := range fields {
			if !receive.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			_spec.Node.Columns[i] = f
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.UpdatedAt(); ok {
		_spec.SetField(receive.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := ruo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(receive.FieldUpdatedAt, field.TypeInt64, value)
	}
	if ruo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   receive.UserTable,
			Columns: []string{receive.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   receive.UserTable,
			Columns: []string{receive.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   receive.OrderTable,
			Columns: []string{receive.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   receive.OrderTable,
			Columns: []string{receive.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Receive{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{receive.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
