// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graph

import (
	"fmt"
	"io"
	"strconv"
)

type ReceiveInput struct {
	UID int `json:"uid"`
	Oid int `json:"oid"`
}

type SignInput struct {
	// 用户名
	Uname *string `json:"uname,omitempty"`
	// 密码
	Passwd string `json:"passwd"`
	// 手机号码
	Phone string `json:"phone"`
}

type Token struct {
	Token       *string `json:"token,omitempty"`
	IsAdmin     *bool   `json:"is_admin,omitempty"`
	IsSecretary *bool   `json:"is_secretary,omitempty"`
}

type Role string

const (
	RoleAdmin     Role = "ADMIN"
	RoleSecretary Role = "SECRETARY"
	RoleUser      Role = "USER"
)

var AllRole = []Role{
	RoleAdmin,
	RoleSecretary,
	RoleUser,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleAdmin, RoleSecretary, RoleUser:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
