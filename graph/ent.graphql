directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
"""
CreateOrderInput is used for create Order object.
Input was generated by ent.
"""
input CreateOrderInput {
  """标题"""
  title: String!
  """内容"""
  content: String!
  """联系方式"""
  contact: String!
  """故障类别"""
  type: String
  """是否被关闭"""
  isClosed: Boolean
  """是否完成"""
  isFinished: Boolean
  """评分"""
  evaluation: Float!
  """期望时间"""
  hopeAt: Time
  """创建时间"""
  createdAt: Time
  """更新时间"""
  updatedAt: Time
  requesterID: ID
  receiverIDs: [ID!]
}
"""
CreateUserInput is used for create User object.
Input was generated by ent.
"""
input CreateUserInput {
  """用户名"""
  uname: String!
  """密码"""
  passwd: String!
  """手机号码"""
  phone: String!
  """微信号"""
  wechat: String
  """是否管理员"""
  isAdmin: Boolean
  """用户状态"""
  isActive: Boolean
  """创建时间"""
  createdAt: Time
  """更新时间"""
  updatedAt: Time
  requestedIDs: [ID!]
  receivedIDs: [ID!]
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "shira-chan-dev/ent.Noder") {
  """The id of the object."""
  id: ID!
}
type Order implements Node {
  id: ID!
  """标题"""
  title: String!
  """内容"""
  content: String!
  """联系方式"""
  contact: String!
  """故障类别"""
  type: String!
  """是否被关闭"""
  isClosed: Boolean!
  """是否完成"""
  isFinished: Boolean!
  """评分"""
  evaluation: Float!
  """期望时间"""
  hopeAt: Time!
  """创建时间"""
  createdAt: Time!
  """更新时间"""
  updatedAt: Time!
  """需求者"""
  requester: User
  receiver(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Users returned from the connection."""
    orderBy: UserOrder

    """Filtering options for Users returned from the connection."""
    where: UserWhereInput
  ): UserConnection!
}
"""A connection to a list of items."""
type OrderConnection {
  """A list of edges."""
  edges: [OrderEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""Possible directions in which to order a list of items when provided an `orderBy` argument."""
enum OrderDirection {
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC
  """Specifies a descending order for a given `orderBy` argument."""
  DESC
}
"""An edge in a connection."""
type OrderEdge {
  """The item at the end of the edge."""
  node: Order
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Order connections"""
input OrderOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Orders."""
  field: OrderOrderField!
}
"""Properties by which Order connections can be ordered."""
enum OrderOrderField {
  TITLE
  TYPE
  IS_CLOSED
  IS_FINISHED
  EVALUATION
  HOPE_AT
  CREAT_AT
  UPDATED_AT
  RECEIVER_COUNT
}
"""
OrderWhereInput is used for filtering Order objects.
Input was generated by ent.
"""
input OrderWhereInput {
  not: OrderWhereInput
  and: [OrderWhereInput!]
  or: [OrderWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """title field predicates"""
  title: String
  titleNEQ: String
  titleIn: [String!]
  titleNotIn: [String!]
  titleGT: String
  titleGTE: String
  titleLT: String
  titleLTE: String
  titleContains: String
  titleHasPrefix: String
  titleHasSuffix: String
  titleEqualFold: String
  titleContainsFold: String
  """content field predicates"""
  content: String
  contentNEQ: String
  contentIn: [String!]
  contentNotIn: [String!]
  contentGT: String
  contentGTE: String
  contentLT: String
  contentLTE: String
  contentContains: String
  contentHasPrefix: String
  contentHasSuffix: String
  contentEqualFold: String
  contentContainsFold: String
  """contact field predicates"""
  contact: String
  contactNEQ: String
  contactIn: [String!]
  contactNotIn: [String!]
  contactGT: String
  contactGTE: String
  contactLT: String
  contactLTE: String
  contactContains: String
  contactHasPrefix: String
  contactHasSuffix: String
  contactEqualFold: String
  contactContainsFold: String
  """type field predicates"""
  type: String
  typeNEQ: String
  typeIn: [String!]
  typeNotIn: [String!]
  typeGT: String
  typeGTE: String
  typeLT: String
  typeLTE: String
  typeContains: String
  typeHasPrefix: String
  typeHasSuffix: String
  typeEqualFold: String
  typeContainsFold: String
  """is_closed field predicates"""
  isClosed: Boolean
  isClosedNEQ: Boolean
  """is_finished field predicates"""
  isFinished: Boolean
  isFinishedNEQ: Boolean
  """evaluation field predicates"""
  evaluation: Float
  evaluationNEQ: Float
  evaluationIn: [Float!]
  evaluationNotIn: [Float!]
  evaluationGT: Float
  evaluationGTE: Float
  evaluationLT: Float
  evaluationLTE: Float
  """hope_at field predicates"""
  hopeAt: Time
  hopeAtNEQ: Time
  hopeAtIn: [Time!]
  hopeAtNotIn: [Time!]
  hopeAtGT: Time
  hopeAtGTE: Time
  hopeAtLT: Time
  hopeAtLTE: Time
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """requester edge predicates"""
  hasRequester: Boolean
  hasRequesterWith: [UserWhereInput!]
  """receiver edge predicates"""
  hasReceiver: Boolean
  hasReceiverWith: [UserWhereInput!]
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}
type Query {
  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node
  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!
  orders(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Orders returned from the connection."""
    orderBy: OrderOrder

    """Filtering options for Orders returned from the connection."""
    where: OrderWhereInput
  ): OrderConnection!
  users(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Users returned from the connection."""
    orderBy: UserOrder

    """Filtering options for Users returned from the connection."""
    where: UserWhereInput
  ): UserConnection!
}
"""The builtin Time type"""
scalar Time
"""
UpdateOrderInput is used for update Order object.
Input was generated by ent.
"""
input UpdateOrderInput {
  """标题"""
  title: String
  """内容"""
  content: String
  """联系方式"""
  contact: String
  """故障类别"""
  type: String
  """是否被关闭"""
  isClosed: Boolean
  """是否完成"""
  isFinished: Boolean
  """评分"""
  evaluation: Float
  """期望时间"""
  hopeAt: Time
  """更新时间"""
  updatedAt: Time
  requesterID: ID
  clearRequester: Boolean
  addReceiverIDs: [ID!]
  removeReceiverIDs: [ID!]
  clearReceiver: Boolean
}
"""
UpdateUserInput is used for update User object.
Input was generated by ent.
"""
input UpdateUserInput {
  """用户名"""
  uname: String
  """密码"""
  passwd: String
  """手机号码"""
  phone: String
  """微信号"""
  wechat: String
  """是否管理员"""
  isAdmin: Boolean
  """用户状态"""
  isActive: Boolean
  """更新时间"""
  updatedAt: Time
  addRequestedIDs: [ID!]
  removeRequestedIDs: [ID!]
  clearRequested: Boolean
  addReceivedIDs: [ID!]
  removeReceivedIDs: [ID!]
  clearReceived: Boolean
}
type User implements Node {
  id: ID!
  """用户名"""
  uname: String!
  """手机号码"""
  phone: String!
  """微信号"""
  wechat: String!
  """是否管理员"""
  isAdmin: Boolean!
  """用户状态"""
  isActive: Boolean!
  """创建时间"""
  createdAt: Time!
  """更新时间"""
  updatedAt: Time!
  requested(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Orders returned from the connection."""
    orderBy: OrderOrder

    """Filtering options for Orders returned from the connection."""
    where: OrderWhereInput
  ): OrderConnection!
  received(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Orders returned from the connection."""
    orderBy: OrderOrder

    """Filtering options for Orders returned from the connection."""
    where: OrderWhereInput
  ): OrderConnection!
}
"""A connection to a list of items."""
type UserConnection {
  """A list of edges."""
  edges: [UserEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for User connections"""
input UserOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Users."""
  field: UserOrderField!
}
"""Properties by which User connections can be ordered."""
enum UserOrderField {
  UNAME
  IS_ADMIN
  STATE
  CREAT_AT
  UPDATED_AT
  REQUESTED_COUNT
  RECEIVED_COUNT
}
"""
UserWhereInput is used for filtering User objects.
Input was generated by ent.
"""
input UserWhereInput {
  not: UserWhereInput
  and: [UserWhereInput!]
  or: [UserWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """uname field predicates"""
  uname: String
  unameNEQ: String
  unameIn: [String!]
  unameNotIn: [String!]
  unameGT: String
  unameGTE: String
  unameLT: String
  unameLTE: String
  unameContains: String
  unameHasPrefix: String
  unameHasSuffix: String
  unameEqualFold: String
  unameContainsFold: String
  """phone field predicates"""
  phone: String
  phoneNEQ: String
  phoneIn: [String!]
  phoneNotIn: [String!]
  phoneGT: String
  phoneGTE: String
  phoneLT: String
  phoneLTE: String
  phoneContains: String
  phoneHasPrefix: String
  phoneHasSuffix: String
  phoneEqualFold: String
  phoneContainsFold: String
  """wechat field predicates"""
  wechat: String
  wechatNEQ: String
  wechatIn: [String!]
  wechatNotIn: [String!]
  wechatGT: String
  wechatGTE: String
  wechatLT: String
  wechatLTE: String
  wechatContains: String
  wechatHasPrefix: String
  wechatHasSuffix: String
  wechatEqualFold: String
  wechatContainsFold: String
  """is_admin field predicates"""
  isAdmin: Boolean
  isAdminNEQ: Boolean
  """is_active field predicates"""
  isActive: Boolean
  isActiveNEQ: Boolean
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """requested edge predicates"""
  hasRequested: Boolean
  hasRequestedWith: [OrderWhereInput!]
  """received edge predicates"""
  hasReceived: Boolean
  hasReceivedWith: [OrderWhereInput!]
}
