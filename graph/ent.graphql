directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
"""
CreateOrderInput is used for create Order object.
Input was generated by ent.
"""
input CreateOrderInput {
  """标题"""
  title: String!
  """内容"""
  content: String!
  """联系方式"""
  contact: String!
  """故障类别"""
  type: OrderType
  """工单状态"""
  status: OrderStatus
  """工单状态"""
  evaluation: Float
  """期望时间"""
  hopeAt: Time
  """创建时间"""
  createdAt: Time
  """更新时间"""
  updatedAt: Time
  requesterID: ID
  receiverIDs: [ID!]
}
"""
CreateUserInput is used for create User object.
Input was generated by ent.
"""
input CreateUserInput {
  """用户名"""
  uname: String!
  """密码"""
  passwd: String!
  """手机号码"""
  phone: String!
  """微信号"""
  wechat: String
  """系统用户类别"""
  level: UserLevel
  """部门"""
  dept: UserDept
  """用户状态"""
  state: UserState
  """创建时间"""
  createdAt: Time
  """更新时间"""
  updatedAt: Time
  requestedIDs: [ID!]
  receivedIDs: [ID!]
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "shira-chan-dev/ent.Noder") {
  """The id of the object."""
  id: ID!
}
type Order implements Node {
  id: ID!
  """标题"""
  title: String!
  """内容"""
  content: String!
  """联系方式"""
  contact: String!
  """故障类别"""
  type: OrderType!
  """工单状态"""
  status: OrderStatus!
  """工单状态"""
  evaluation: Float
  """期望时间"""
  hopeAt: Time!
  """创建时间"""
  createdAt: Time!
  """更新时间"""
  updatedAt: Time!
  """需求者"""
  requester: User
  receiver(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Users returned from the connection."""
    orderBy: UserOrder
  ): UserConnection!
}
"""A connection to a list of items."""
type OrderConnection {
  """A list of edges."""
  edges: [OrderEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""Possible directions in which to order a list of items when provided an `orderBy` argument."""
enum OrderDirection {
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC
  """Specifies a descending order for a given `orderBy` argument."""
  DESC
}
"""An edge in a connection."""
type OrderEdge {
  """The item at the end of the edge."""
  node: Order
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Order connections"""
input OrderOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Orders."""
  field: OrderOrderField!
}
"""Properties by which Order connections can be ordered."""
enum OrderOrderField {
  TITLE
  TYPE
  STATUS
  EVALUATION
  HOPE_AT
  CREAT_AT
  UPDATED_AT
  RECEIVER_COUNT
}
"""OrderStatus is enum for the field status"""
enum OrderStatus @goModel(model: "shira-chan-dev/ent/order.Status") {
  requested
  received
  finished
  closed
}
"""OrderType is enum for the field type"""
enum OrderType @goModel(model: "shira-chan-dev/ent/order.Type") {
  software
  hardware
  unknown
  other
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}
type Query {
  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node
  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!
  orders(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Orders returned from the connection."""
    orderBy: OrderOrder
  ): OrderConnection!
  users(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Users returned from the connection."""
    orderBy: UserOrder
  ): UserConnection!
}
"""The builtin Time type"""
scalar Time
"""
UpdateOrderInput is used for update Order object.
Input was generated by ent.
"""
input UpdateOrderInput {
  """标题"""
  title: String
  """内容"""
  content: String
  """联系方式"""
  contact: String
  """故障类别"""
  type: OrderType
  """工单状态"""
  status: OrderStatus
  """工单状态"""
  evaluation: Float
  clearEvaluation: Boolean
  """期望时间"""
  hopeAt: Time
  """更新时间"""
  updatedAt: Time
  requesterID: ID
  clearRequester: Boolean
  addReceiverIDs: [ID!]
  removeReceiverIDs: [ID!]
  clearReceiver: Boolean
}
"""
UpdateUserInput is used for update User object.
Input was generated by ent.
"""
input UpdateUserInput {
  """用户名"""
  uname: String
  """密码"""
  passwd: String
  """手机号码"""
  phone: String
  """微信号"""
  wechat: String
  """系统用户类别"""
  level: UserLevel
  """部门"""
  dept: UserDept
  """用户状态"""
  state: UserState
  """更新时间"""
  updatedAt: Time
  addRequestedIDs: [ID!]
  removeRequestedIDs: [ID!]
  clearRequested: Boolean
  addReceivedIDs: [ID!]
  removeReceivedIDs: [ID!]
  clearReceived: Boolean
}
type User implements Node {
  id: ID!
  """用户名"""
  uname: String!
  """手机号码"""
  phone: String!
  """微信号"""
  wechat: String!
  """系统用户类别"""
  level: UserLevel!
  """部门"""
  dept: UserDept!
  """用户状态"""
  state: UserState!
  """创建时间"""
  createdAt: Time!
  """更新时间"""
  updatedAt: Time!
  requested(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Orders returned from the connection."""
    orderBy: OrderOrder
  ): OrderConnection!
  received(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Orders returned from the connection."""
    orderBy: OrderOrder
  ): OrderConnection!
}
"""A connection to a list of items."""
type UserConnection {
  """A list of edges."""
  edges: [UserEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""UserDept is enum for the field dept"""
enum UserDept @goModel(model: "shira-chan-dev/ent/user.Dept") {
  none
}
"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""UserLevel is enum for the field level"""
enum UserLevel @goModel(model: "shira-chan-dev/ent/user.Level") {
  root
  admin
  president
  minister
  member
  user
  banned
}
"""Ordering options for User connections"""
input UserOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Users."""
  field: UserOrderField!
}
"""Properties by which User connections can be ordered."""
enum UserOrderField {
  UNAME
  LEVEL
  DEPT
  STATE
  CREAT_AT
  UPDATED_AT
  REQUESTED_COUNT
  RECEIVED_COUNT
}
"""UserState is enum for the field state"""
enum UserState @goModel(model: "shira-chan-dev/ent/user.State") {
  on
  off
}
