package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.31

import (
	"context"
	"errors"
	"shira-chan-dev/app/utils"
	"shira-chan-dev/ent"
	"shira-chan-dev/ent/user"
)

// Sign is the resolver for the sign field.
func (r *mutationResolver) Sign(ctx context.Context, input SignInput) (*Token, error) {
	// 通过手机号查找用户
	u, err := r.client.User.Query().
		Where(user.PhoneEQ(input.Phone)).
		Only(ctx)
	if input.Uname != nil {
		// 注册
		if u != nil {
			pwd, err := utils.GetPwd(input.Passwd)
			if err == nil {
				u, err = utils.Client.User.Create().
					SetUname(*input.Uname).
					SetPhone(input.Phone).
					SetPasswd(string(pwd)).
					Save(ctx)
			} else {
				return nil, err
			}
		} else {
			return nil, errors.New("user already exists")
		}
	} else {
		// 登录
		if u == nil {
			return nil, errors.New("user does not exists")
		} else {
			if !utils.ComparePwd(u.Passwd, input.Passwd) {
				return nil, errors.New("password incorrect")
			}
		}
	}
	if u != nil {
		// 生成token
		if !u.IsActive {
			return nil, errors.New("banned")
		} else {
			var token string
			token, err = utils.GetToken(u.ID, u.IsAdmin)
			return &Token{Token: &token}, err
		}
	}
	return nil, errors.New("bad request")
	//if u == nil {
	//	// 用户不存在，试图注册
	//	pwd, err := utils.GetPwd(input.Passwd)
	//	if err == nil && input.Uname != nil {
	//		u, err = utils.Client.User.Create().
	//			SetUname(*input.Uname).
	//			SetPhone(input.Phone).
	//			SetPasswd(string(pwd)).
	//			Save(ctx)
	//	}
	//} else {
	//	// 存在，比较密码
	//	if !utils.ComparePwd(u.Passwd, input.Passwd) {
	//		return nil, errors.New("bad passwd")
	//	}
	//}
	//if u != nil {
	//	// 生成token
	//	if !u.IsActive {
	//		return nil, errors.New("banned user")
	//	} else {
	//		var token string
	//		token, err = utils.GetToken(u.ID, u.IsAdmin)
	//		return &Token{Token: &token}, err
	//	}
	//}
	//return nil, errors.New("bad request")
}

// Receive is the resolver for the receive field.
func (r *mutationResolver) Receive(ctx context.Context, input *ReceiveInput) (*bool, error) {
	client := ent.FromContext(ctx)
	receiver, err := client.User.Get(ctx, input.UID)
	if err != nil {
		return nil, errors.New("user not found")
	}
	order, err := client.Order.Get(ctx, input.Oid)
	if err != nil {
		return nil, errors.New("order not found")
	}
	b := false
	_, err = client.Order.UpdateOne(order).AddReceiver(receiver).Save(ctx)
	if err != nil {
		return nil, err
	}
	b = true
	return &b, nil
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input ent.CreateUserInput) (*ent.User, error) {
	temp, err := utils.GetPwd(input.Passwd)
	if err != nil {
		return nil, err
	} else {
		input.Passwd = string(temp)
	}
	client := ent.FromContext(ctx)
	return client.User.Create().SetInput(input).Save(ctx)
}

// CreateOrder is the resolver for the createOrder field.
func (r *mutationResolver) CreateOrder(ctx context.Context, input ent.CreateOrderInput) (*ent.Order, error) {
	client := ent.FromContext(ctx)
	return client.Order.Create().SetInput(input).Save(ctx)
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, id int, input ent.UpdateUserInput) (*ent.User, error) {
	temp, err := utils.GetPwd(*input.Passwd)
	if err != nil {
		return nil, err
	} else {
		*input.Passwd = string(temp)
	}
	client := ent.FromContext(ctx)
	return client.User.UpdateOneID(id).SetInput(input).Save(ctx)
}

// UpdateOrder is the resolver for the updateOrder field.
func (r *mutationResolver) UpdateOrder(ctx context.Context, id int, input ent.UpdateOrderInput) (*ent.Order, error) {
	client := ent.FromContext(ctx)
	return client.Order.UpdateOneID(id).SetInput(input).Save(ctx)
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
